" .vimrc
" ===========================================================================

set nocompatible                " Turn off compability mode with Vi

" Load plugins
if filereadable(expand("~/.dotfiles/vim/vim-plug.vim"))
  source ~/.dotfiles/vim/vim-plug.vim
endif


" General
" ---------------------------------------------------------------------------

" Keep unsaved files open in buffers
set hidden

set noerrorbells                " No beeps
set backspace=indent,eol,start  " Makes backspace key more powerful
set showcmd                     " Show me what I'm typing
set cmdheight=2                 " Height of the command prompt
set showmode                    " Show/Hide current mode
" set relativenumber              " Set relative line number
set number                      " Enables hybrid line number mode
set numberwidth=5               " Line numbers width (leading whitespace)
set nocursorline                " Don't Highlight the current line

set noswapfile                  " Dont use swapfile
set nobackup                    " Dont create annoying backup files

set splitright                  " Split vertical windows to the right
set splitbelow                  " Split horizontal windows below

set ssop-=options               " Dont store global and local values in a session
set ssop-=folds                 " Dont store folds

set encoding=utf-8              " Set default encoding to UTF-8
set autowrite                   " Autosave before :next, :make etc.
set autoread                    " Autoreread changed files w/o asking
set laststatus=2                " Always show status line

set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats

set conceallevel=2              " See http://ithaca.arpinum.org/2010/11/06/vim-conceal-for-ruby.html

set scroll=5                    " Set # lines CTRL-D and CTRL-U jumps
" noremap <C-u> 5<C-u>            " Needed to have scroll option applied even after windows resize
set scrolloff=5                 " Start scrolling X lines above/below window end

set history=10000               " A long long time ago …

" set clipboard+=unnamed          " Use System Clipboard"

set timeoutlen=1500              " Timeout for leader key

set nostartofline               " Dont jump to start of line e.g. when switching buffers
" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

set shortmess+=c                " Hide the 'Back at original' and 'Match X of Y' when autocompleting

if $SHELL =~ 'bin/fish'
  set shell=/bin/sh
endif

" Source the vimrc file after saving it
" autocmd bufwritepost .vimrc source $MYVIMRC


" Indentation settings
" ---------------------------------------------------------------------------

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set copyindent
set smartindent

filetype off
filetype plugin on              " Turn on file type detection.
filetype indent on

" Display tabs and trailing spaces visually
" ↪ and display the next line if the line exceeds the width of the window
if has("multi_byte")
  set listchars=nbsp:░,tab:▸\ ,eol:¬,extends:>,precedes:<,trail:·
  let &sbr = nr2char(8618).' '
else
  set lcs=tab:>\ ,extends:>,precedes:<,trail:-
  let &sbr = '+++ '
endif
function! UpdateLcs()
  if (&previewwindow)
    setlocal nolist
  endif
endfunction
autocmd BufEnter,BufWinEnter,WinEnter,CmdwinEnter * call UpdateLcs()

" Remove trailing white space for certain file types on save
autocmd BufWritePre {*.c,*.bib,*.coffee,*.css,*.erb,*.haml,*.html,*.js,*.jsx,*.py,*.rb,*.sass,*.scss,*.slim,*.tex,*.vim,*.hxtml,*.xml,*.yml} :call <SID>StripTrailingWhitespaces()


" Text wrapping
" ---------------------------------------------------------------------------

set breakindent
set list
set columns=89                 " window width
set wrap
set linebreak
set textwidth=0
set wrapmargin=0
set formatoptions+=l           " no automatic linebreaks"
" set foldcolumn=0
" autocmd BufNewFile,BufRead * setlocal formatoptions=qn1j        " see ':h fo-table' and http://stackoverflow.com/questions/6076592/vim-set-formatoptions-being-lost
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro        " Comments: Don't continue on new line, etc.


" Searching
" ---------------------------------------------------------------------------

"nnoremap / /\v
"vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch                    " Highlight search results
set incsearch                   " Transfer the search term when writing


" Theming
" ---------------------------------------------------------------------------

syntax enable
set t_Co=256                    " Set 256 colors in terminal mode
set background=dark

" Some nice colorschemes
" - dark
" colorscheme base16-default  " base16- all work in dark and light
" colorscheme base16-ocean
" colorscheme clearance
" colorscheme flatcolor
" colorscheme icicle
" colorscheme lanai
colorscheme lucid
" colorscheme muon
" colorscheme pencil
" colorscheme solstice
" colorscheme spacegray
" colorscheme wolfpack
" - light
" colorscheme flatui
" colorscheme lanai-light
" colorscheme github
" colorscheme google
" colorscheme louver
" colorscheme tomatosoup


" Persistent undo
" ---------------------------------------------------------------------------
" Keep undo history across sessions, by storing in file.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile


" Custom key mappings/shortcuts
" ---------------------------------------------------------------------------

" Sane vertical moving on displayed lines
nnoremap j gj
nnoremap k gk

" Bring cursor back after repeating a command
nmap . .`[

" Allow saving of files as sudo
"command W! w !sudo tee % >/dev/null

:let mapleader=","

nmap <leader>e :e.<cr>                    " Show netrw
nmap <silent> <leader>v :e $MYVIMRC<cr>
nmap <leader>8 :call ToggleColorschemeBackground()<cr>
function! ToggleColorschemeBackground()
  if &background == 'light'
    set background=dark
  else
    set background=light
  endif
endfunc
nmap <silent> <leader>vr :so $MYVIMRC<cr>
" Switch between the last two files with double leader
nnoremap <leader><leader> <c-^>

" Show syntax highlighting groups for word under cursor
nmap <leader>w :call <SID>SynStack()<cr>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

cabbrev tn tabnew


" Statusline
" ---------------------------------------------------------------------------

set statusline=
"set statusline+=%t                               "tail of the filename
" set statusline+=[%t]\ \                         "file name
set statusline+=\ Line\ %l/%L\ (%P),\             "cursor line/total lines (Percent)
set statusline+=Column\ %c\ \                     "cursor column
set statusline+=%=                                "left/right separator
set statusline+=\ \ %{strlen(&fenc)?&fenc:'none'} "file encoding
set statusline+=\ \ \|\ \ %{&ff}\ \ \|\ \         "file format
set statusline+=%h                                "help file flag
set statusline+=%r                                "read only flag
set statusline+=%y                                "filetype
set statusline+=%m\                               "modified flag


" Wildmode completion
" ---------------------------------------------------------------------------

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
" stuff to ignore when tab completing, for ctrlp, etc.
set wildignore=*.o,*.obj,*~ 
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=Icon
set wildignore+=Icon^M^M
set wildignore+="Icon\r"


" Functions
" ----------------------------------------------------------------------------

" http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! BufferClean()
  " list of *all* buffer numbers
  let l:buffers = range(1, bufnr('$'))

  " what tab page are we in?
  let l:currentTab = tabpagenr()
  try
    " go through all tab pages
    let l:tab = 0
    while l:tab < tabpagenr('$')
      let l:tab += 1

      " go through all windows
      let l:win = 0
      while l:win < winnr('$')
        let l:win += 1
        " whatever buffer is in this window in this tab, remove it from
        " l:buffers list
        let l:thisbuf = winbufnr(l:win)
        call remove(l:buffers, index(l:buffers, l:thisbuf))
      endwhile
    endwhile

    " if there are any buffers left, delete them
    if len(l:buffers)
      execute 'bwipeout' join(l:buffers)
    endif
  finally
    " go back to our original tab page
    execute 'tabnext' l:currentTab
  endtry
endfunction

function! ProfileVimStart()
  profile start profile.log
  profile func *
  profile file *
" At this point do slow actions
endfunction

function! ProfileVimEnd()
  profile pause
  noautocmd qall!
endfunction


" MacVim modifications (color, shortcuts, etc.. "
" ---------------------------------------------------------------------------

if has("gui_macvim")
  " set guifont=Anka\/Coder:h13
  " set guifont=Anonymous\ Pro:h14
  " set guifont=Bitstream\ Vera\ Sans\ Mono:h13
  " set guifont=Cousine:h13
  " set guifont=Fira\ Code:h13 | set linespace=6
  " set guifont=Hack:h13
  " set guifont=Hasklig:h14 | set linespace=1
  " set guifont=Input:h12 | set linespace=5
  " set guifont=Lekton:h16
  " set guifont=Menlo:h13
  " set guifont=Monego:h13 | set linespace=4
  " set guifont=Monoid:h13 | set linespace=3
  " set guifont=mononoki:h16 | set linespace=4
  " set guifont=Office\ Code\ Pro:h14 | set linespace=2
  " set guifont=OpenDyslexicMono:h13
  " set guifont=Source\ Code\ Pro:h13
  set guifont=SF\ Mono\ Regular:h13 | set linespace=2
  set macligatures " Enables ligatures (MacOS) some fonts like Hasklig provide
  set transparency=0
  " No toolbars, menu or scrollbars in the GUI
  set vb t_vb=
  set guioptions-=m  "no menu
  set guioptions-=T  "no toolbar
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r  "no scrollbar
  set guioptions-=R

  set guicursor=a:blinkon0 " No blinking cursor

  set showtabline=1  "always show tabbar, so no resizing occurs

  " Move  with cmd+alt
  nmap <D-M-RIGHT> gt
  nmap <D-M-LEFT> gT

  " Move to tabs with CMD + tab#
  map <D-S-]> gt
  map <D-S-[> gT
  map <D-1> 1gt
  map <D-2> 2gt
  map <D-3> 3gt
  map <D-4> 4gt
  map <D-5> 5gt
  map <D-6> 6gt
  map <D-7> 7gt
  map <D-8> 8gt
  map <D-9> 9gt
  map <D-0> :tablast<cr>
endif


" Plugin settings
" ---------------------------------------------------------------------------

if filereadable(expand("~/.dotfiles/vim/settings.vim"))
  source ~/.dotfiles/vim/settings.vim
endif

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
endif
